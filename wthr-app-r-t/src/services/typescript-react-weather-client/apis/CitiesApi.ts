/* tslint:disable */
/* eslint-disable */
/**
 * WeatherApplication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CityDto,
    CityDtoFromJSON,
    CityDtoToJSON,
} from '../models';

export interface ApiCitiesGetRequest {
    addCanSprayTime?: boolean;
}

export interface ApiCitiesIdGetRequest {
    id: number;
}

/**
 * 
 */
export class CitiesApi extends runtime.BaseAPI {

    /**
     */
    async apiCitiesGetRaw(requestParameters: ApiCitiesGetRequest): Promise<runtime.ApiResponse<Array<CityDto>>> {
        const queryParameters: any = {};

        if (requestParameters.addCanSprayTime !== undefined) {
            queryParameters['addCanSprayTime'] = requestParameters.addCanSprayTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Cities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityDtoFromJSON));
    }

    /**
     */
    async apiCitiesGet(requestParameters: ApiCitiesGetRequest): Promise<Array<CityDto>> {
        const response = await this.apiCitiesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCitiesIdGetRaw(requestParameters: ApiCitiesIdGetRequest): Promise<runtime.ApiResponse<CityDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCitiesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Cities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CityDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiCitiesIdGet(requestParameters: ApiCitiesIdGetRequest): Promise<CityDto> {
        const response = await this.apiCitiesIdGetRaw(requestParameters);
        return await response.value();
    }

}
