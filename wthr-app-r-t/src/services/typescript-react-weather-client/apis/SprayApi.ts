/* tslint:disable */
/* eslint-disable */
/**
 * WeatherApplication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CanSprayDto,
    CanSprayDtoFromJSON,
    CanSprayDtoToJSON,
    CityDto,
    CityDtoFromJSON,
    CityDtoToJSON,
    InfoDto,
    InfoDtoFromJSON,
    InfoDtoToJSON,
} from '../models';

export interface ApiSprayCansprayCityidGetRequest {
    cityid: number;
}

/**
 * 
 */
export class SprayApi extends runtime.BaseAPI {

    /**
     */
    async apiSprayCansprayCityidGetRaw(requestParameters: ApiSprayCansprayCityidGetRequest): Promise<runtime.ApiResponse<CanSprayDto>> {
        if (requestParameters.cityid === null || requestParameters.cityid === undefined) {
            throw new runtime.RequiredError('cityid','Required parameter requestParameters.cityid was null or undefined when calling apiSprayCansprayCityidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Spray/canspray/{cityid}`.replace(`{${"cityid"}}`, encodeURIComponent(String(requestParameters.cityid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CanSprayDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiSprayCansprayCityidGet(requestParameters: ApiSprayCansprayCityidGetRequest): Promise<CanSprayDto> {
        const response = await this.apiSprayCansprayCityidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSprayGetcitiesGetRaw(): Promise<runtime.ApiResponse<Array<CityDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Spray/getcities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityDtoFromJSON));
    }

    /**
     */
    async apiSprayGetcitiesGet(): Promise<Array<CityDto>> {
        const response = await this.apiSprayGetcitiesGetRaw();
        return await response.value();
    }

    /**
     */
    async apiSprayGetinfoGetRaw(): Promise<runtime.ApiResponse<InfoDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Spray/getinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiSprayGetinfoGet(): Promise<InfoDto> {
        const response = await this.apiSprayGetinfoGetRaw();
        return await response.value();
    }

}
